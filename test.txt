from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")from mtf import mtf
from rle import rle
from bwt import bwt  # Assuming rle is another module you have

class tiny_compress:
    def __init__(self):
        self.logger = self.setup_logger()

    def setup_logger(self):
        import logging
        logger = logging.getLogger('tiny_compress')
        logger.setLevel(logging.INFO)
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def log_bytes(self, data: bytes, description: str, original_size: int = None):
        self.logger.info(f"{description}: {data[:50]}{'...' if len(data) > 50 else ''} ({len(data)} bytes)")

    def compress(self, data: bytes) -> bytes:
        self.logger.info("\nCOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        original_size = len(data)
        self.log_bytes(data, "Input Data")

        bwt_encoded = bwt.encode(data)
        self.log_bytes(bwt_encoded, "After BWT", original_size)

        mtf_encoded = mtf.encode(bwt_encoded)
        self.log_bytes(mtf_encoded, "After MTF", original_size)

        rel_encoded = rle.encode(mtf_encoded)
        self.log_bytes(rel_encoded, "After RLE", original_size)

        compressed_size = len(rel_encoded)
        compression_ratio = compressed_size / original_size
        self.logger.info(f"Compression ratio: {compression_ratio:.2f}")
        print(f"Compression ratio: {compression_ratio:.2f}")  # Output to console

        return rel_encoded

    def decompress(self, data: bytes) -> bytes:
        self.logger.info("\nDECOMPRESSION PROCESS")
        self.logger.info("=" * 80)

        self.log_bytes(data, "Input Compressed Data")

        rel_decoded = rle.decode(data)
        self.log_bytes(rel_decoded, "After RLE Decode")

        mtf_decoded = mtf.decode(rel_decoded)
        self.log_bytes(mtf_decoded, "After MTF Decode")

        bwt_decoded = bwt.decode(mtf_decoded)
        self.log_bytes(bwt_decoded, "After BWT Decode")

        return bwt_decoded

    # 文件压缩
    def compress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        compressed = self.compress(data)

        with open(output_file, 'wb') as f:
            f.write(compressed)

    # 文件解压缩
    def decompress_file(self, input_file: str, output_file: str):
        with open(input_file, 'rb') as f:
            data = f.read()

        decompressed = self.decompress(data)

        with open(output_file, 'wb') as f:
            f.write(decompressed)

    # 测试文件压缩和解压缩
    def test_file(self, input_file: str):
        self.logger.info("Starting File Compression Test")
        self.logger.info("=" * 80)

        output_file = "output_compressed.bin"
        self.compress_file(input_file, output_file)

        self.logger.info("File compressed successfully!")

        output_file = "output_decompressed.bin"
        self.decompress_file(output_file, output_file)

        self.logger.info("File decompressed successfully!")

    def _test_single_case(self, data: bytes):
        self.logger.info("\nCOMPRESSION TEST")
        self.logger.info("=" * 80)

        compressed = self.compress(data)
        decompressed = self.decompress(compressed)

        self.logger.info("\nCOMPRESSION RESULTS")
        self.logger.info("=" * 80)
        self.logger.info(f"Original size: {len(data)} bytes")
        self.logger.info(f"Compressed size: {len(compressed)} bytes")

        assert data == decompressed
        self.logger.info("Test passed! Original and decompressed data match.")

    def test(self):
        self.logger.info("Starting Compression Tests")
        self.logger.info("=" * 80)

        data = b"banana"*100 + b"apple" + b"banana"*100
        self._test_single_case(data)from sais import sais
from collections import defaultdict

class bwt:
    END = b'\x01'  # Use byte representation of 0x01 (must not appear in original string)

    @staticmethod
    def encode(s: bytes) -> bytes:
        """Perform Burrows-Wheeler Transform on byte sequence using SAIS"""
        s = s + bwt.END
        sa = sais(s)
        sa = sa[1:]  # Remove the first element which is the position of the end marker
        bwt_result = bytearray()
        for pos in sa:
            if pos == 0:
                bwt_result.append(s[-1])
            else:
                bwt_result.append(s[pos - 1])
        return bytes(bwt_result)

    @staticmethod
    def decode(r: bytes) -> bytes:
        """Efficiently decode a BWT-transformed byte sequence using LF Mapping"""
        # Step 1: Create the LF mapping
        # Count the frequency of each character
        freq = defaultdict(int)
        for c in r:
            freq[c] += 1

        # Step 2: Build the sorted list of characters
        sorted_chars = sorted(freq.keys())

        # Step 3: Compute the starting index for each character in the sorted list
        start = {}
        total = 0
        for c in sorted_chars:
            start[c] = total
            total += freq[c]

        # Step 4: Build the LF mapping
        lf = [0] * len(r)
        count = defaultdict(int)
        for i, c in enumerate(r):
            lf[i] = start[c] + count[c]
            count[c] += 1

        # Step 5: Reconstruct the original string
        # Find the position of the END character
        end_pos = r.find(bwt.END)
        if end_pos == -1:
            raise ValueError("END character not found in BWT string")

        # Reconstruct the original string
        s = bytearray()
        pos = end_pos
        for _ in range(len(r) - 1):
            pos = lf[pos]
            s.append(r[pos])

        return bytes(s[::-1])  # Reverse thedef read_input_to_bytes(prompt: str = "Enter text: ", delimiter: str = "\n") -> bytes:
    """
    Read user input from the console and convert it to a byte stream.
    """
    user_input = input(prompt + delimiter)
    return user_input.encode('utf-8')

def read_input_lines_to_bytes(prompt: str = "Enter text (type 'END' on a new line to finish):", delimiter: str = "\n") -> bytes:
    """
    Read multiple lines of user input from the console and convert them to a byte stream.
    """
    print(prompt)
    lines = []
    while True:
        line = input()
        if line == 'END':
            break
        lines.append(line)
    return delimiter.join(lines).encode('utf-8')
# Example usage
if __name__ == '__main__':
    s = b'banana_apple_banana'
    bwt_encoded = bwt.encode(s)
    bwt_decoded = bwt.decode(bwt_encoded)
    assert bwt_decoded == s
    print('BWT test passed')

        self.logger.info("All tests passed!")

if __name__ == '__main__':
    # 测试串的压缩和解压缩
    compressor = tiny_compress()
    compressor.test()
#     测试文件的压缩和解压缩
    compressor.test_file("test.txt")